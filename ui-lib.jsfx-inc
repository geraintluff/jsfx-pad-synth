@init
uix_debug = 0;

uix_hassetup = 0;
uix_screenstack = 0;
uix_screenstack_step = 10 + UI_SCREEN#; // header + 10 vars
uix_screenstack_layercount = 10;
uix_screenstack_currentlayer = 0;

uix_drawconfig = 0;
uix_drawconfig_step = uix_DRAWCONFIG##;
uix_drawconfig_count = 100;
uix_drawconfig_current = 0;
uix_drawconfig_currentindex = -1;

uix_mousecap_prev = 0;
uix_mouseblocked = 0;
uix_doubleclicktime = 0.2;
uix_click1 = uix_click2 = uix_click64 = 0;
uix_unclick1 = uix_unclick2 = uix_unclick64 = 0;
uix_click1_x = uix_click1_y = uix_click1_t = 0; // Left
uix_click2_x = uix_click2_y = uix_click2_t = 0; // Right
uix_click64_x = uix_click64_y = uix_click3_t = 0; // Middle

uix_default_fontsize = 16;
uix_default_fontface = "Arial";
uix_font_dirty = 0;

uix_error = 0;
function uix_clamp1(v) (
	min(1, max(0, v));
);
function uix_clamp255(v) (
	min(255, max(0, floor(v + 0.5)));
);
function uix_setgfxcolorrgba(r, g, b, a) (
	gfx_r = uix_clamp1(r/255);
	gfx_g = uix_clamp1(g/255);
	gfx_b = uix_clamp1(b/255);
	gfx_a = uix_clamp1(a);
);
function uix_setgfxcolor() (
	uix_setgfxcolorrgba(
		uix_drawconfig_current[uix_DRAWCONFIG#RED],
		uix_drawconfig_current[uix_DRAWCONFIG#GREEN],
		uix_drawconfig_current[uix_DRAWCONFIG#BLUE],
		uix_drawconfig_current[uix_DRAWCONFIG#ALPHA]
	);
);
function uix_clearcolor(r, g, b) (
	uix_clamp255(r) + 256*uix_clamp255(g) + 65536*uix_clamp255(b);
);
function uix_fontflags() local(bold, italic) (
	bold = uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD];
	italic = uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC];
	bold ? (
		italic ? 'bi' : 'b';
	) : (
		italic ? 'i' : '';
	);
);
function uix_setgfxfont() (
	uix_font_dirty || gfx_getfont() != uix_drawconfig_current[uix_DRAWCONFIG#FONTINDEX] ? (
		uix_font_dirty = 0;
		gfx_setfont(
			uix_drawconfig_current[uix_DRAWCONFIG#FONTINDEX],
			uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE],
			uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE],
			uix_fontflags()
		);
	);
);
function uix_click_block() (
	uix_mouseblocked = 1;
	uix_click1count = 0;
	uix_click1 = uix_click2 = uix_click64 = 0;
	uix_unclick1 = uix_unclick2 = uix_unclick64 = 0;
	uix_click1_x = uix_click1_y = uix_click1_t = 0; // Left
	uix_click2_x = uix_click2_y = uix_click2_t = 0; // Right
	uix_click64_x = uix_click64_y = uix_click3_t = 0; // Middle
);

function ui_error(string) (
	uix_click_block();
	uix_screenstack_currentlayer = 0;
	uix_screenstack[UI_SCREEN#ID] = "error";
	uix_error = uix_screenstack[UI_SCREEN#] = string; // First argument
	0;
);

function ui_screen() (
	uix_hassetup
		? (uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer)[0]
		: "error";
);

function ui_screen_level() (
	uix_screenstack_currentlayer;
);

function ui_screen_open(id) local(i, screen) (
	uix_click_block();
	uix_screenstack_currentlayer += 1;
	uix_screenstack_currentlayer < uix_screenstack_layercount ? (
		screen = (uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer);
		screen[0] = id;
		i = 1;
		while (
			screen[i] = 0;
			i += 1;
			i < uix_screenstack_step;
		);
	) : ui_error("Too many screens - only 10 dialogs deep")
);

function ui_screen_close() (
	uix_click_block();
	uix_screenstack_currentlayer > 0 ? (
		uix_screenstack_currentlayer -= 1;
	) : ui_error("Cannot close top-level screen");
);

function ui_screen_get(index) local(screen) (
	screen = (uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer);
	offset = index + UI_SCREEN#;
	offset < uix_screenstack_step ? (
		screen[offset];
	) : (
		ui_error("Screens only have 10 arguments");
	);
);

function ui_screen_set(index, value) local(screen, offset) (
	screen = (uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer);
	offset = index + 1;
	offset < uix_screenstack_step ? (
		screen[offset] = value;
	) : (
		ui_error("Screens only have 10 arguments");
	);
);

function ui_setup(stackstart) local(uix_screenstack_end, uix_drawconfig_end) (
	uix_hassetup = 1;
	
	uix_screenstack = stackstart;
	uix_screenstack_end = stackstart + uix_screenstack_step*uix_screenstack_layercount;
	
	uix_drawconfig = uix_screenstack_end;
	uix_drawconfig_end = uix_drawconfig + uix_drawconfig_step*uix_drawconfig_count;
	uix_drawconfig_end;
);

function ui_start(defaultScreen) local(i, click, clickdelta) (
	uix_hassetup ? (
		!ui_screen() ? (
			uix_screenstack_currentlayer = 0;
			i = 0;
			while (
				uix_screenstack[i] = 0;
				i += 1;
				i < uix_screenstack_step;
			);
			uix_screenstack[0] = defaultScreen;
		);
		uix_drawconfig_currentindex = 0;
		uix_drawconfig_current = uix_drawconfig;
		
		// Default colours
		gfx_clear = uix_clearcolor(242, 242, 242);
		
		uix_drawconfig_current[uix_DRAWCONFIG#RED] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#GREEN] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#BLUE] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#ALPHA] = 1;

		uix_drawconfig_current[uix_DRAWCONFIG#LEFT] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#TOP] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = gfx_w;
		uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = gfx_h;
		uix_drawconfig_current[uix_DRAWCONFIG#HALIGN] = 0.5;
		uix_drawconfig_current[uix_DRAWCONFIG#VALIGN] = 0.5;
		uix_drawconfig_current[uix_DRAWCONFIG#HPADDING] = 10;
		uix_drawconfig_current[uix_DRAWCONFIG#VPADDING] = 8;

		uix_drawconfig_current[uix_DRAWCONFIG#FONTINDEX] = 16;
		uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE] = uix_default_fontface;
		uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE] = uix_default_fontsize;
		uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC] = 0;
		
		uix_font_dirty = 1;
		uix_setgfxfont();
		
		uix_unclick1 = (!(mouse_cap&1) && uix_mousecap_prev&1);
		uix_click1 = (mouse_cap&1 && !(uix_mousecap_prev&1)) ? (
			clickdelta = time_precise() - uix_click1_t;
			uix_click1_x = mouse_x;
			uix_click1_y = mouse_y;
			uix_click1 = 1;
			uix_click1_t = time_precise() - 0.001;

			uix_click1 = 1;
			clickdelta < uix_doubleclicktime ? (
				uix_click1count += 1;
			) : (
				uix_click1count = 1;
			);
			
		);
		uix_unclick2 = (!(mouse_cap&2) && uix_mousecap_prev&2);
		uix_click2 = (mouse_cap&2 && !(uix_mousecap_prev&2)) ? (
			uix_click2 = 1;
			uix_click2_x = mouse_x;
			uix_click2_y = mouse_y;
			uix_click2_t = time_precise() - 0.001;
		);
		uix_unclick64 = (!(mouse_cap&64) && uix_mousecap_prev&64);
		uix_click64 = (mouse_cap&64 && !(uix_mousecap_prev&64)) ? (
			uix_click64 = 1;
			uix_click64_x = mouse_x;
			uix_click64_y = mouse_y;
			uix_click64_t = time_precise() - 0.001;
		);
		uix_mousecap_prev = mouse_cap;
		
		uix_mouseblocked ? uix_click_block(); // Must be first, so unclick events get removed too
		!(mouse_cap&1) && !(mouse_cap&2) && !(mouse_cap&64) ? uix_mouseblocked = 0;
	) : (
		uix_error = "ui_setup() has not been called";
	);
);

function ui_system() local(text, error, screen) (
	ui_screen() == "error" ? (
		gfx_clear = 255 + 255*256 + 255*65536;
		gfx_r = 64;
		gfx_g = gfx_b = 0;
		gfx_x = gfx_y = gfx_texth;
		screen = uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer;
		error = screen[UI_SCREEN#]; // First argument
		strlen(error) ? (
			gfx_printf("Error: %s\n(%f)", error, error);
		) : (
			gfx_printf("Error: #%s", error);
		);
		uix_click1 ? (
			uix_screenstack_currentlayer = -1;
			ui_screen_open(0);
		);
	) : (
		gfx_clear = 255 + 255*256 + 255*65536;
		gfx_r = gfx_g = gfx_b = 0;
		gfx_x = gfx_y = gfx_texth;
		ui_screen() ? (
			gfx_printf("Unknown screen: %s (%f)", ui_screen(), ui_screen());
			uix_click1 ? (
				uix_screenstack_currentlayer = -1;
				ui_screen_open(0);
			);
		) : (
			gfx_drawstr("Current screen is 0 - are you calling ui_start() first?");
		);
	);
);

function ui_left() (
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT];
);
function ui_top() (
	uix_drawconfig_current[uix_DRAWCONFIG#TOP];
);
function ui_width() (
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH];
);
function ui_height() (
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT];
);
function ui_bottom() (
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] + uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT];
);
function ui_right() (
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] + uix_drawconfig_current[uix_DRAWCONFIG#WIDTH];
);

/////// Drawing operations ///////

function ui_color_refresh() (
	uix_setgfxcolor();
);

function ui_color(r, g, b) (
	uix_drawconfig_current[uix_DRAWCONFIG#RED] = r;
	uix_drawconfig_current[uix_DRAWCONFIG#GREEN] = g;
	uix_drawconfig_current[uix_DRAWCONFIG#BLUE] = b;
	uix_drawconfig_current[uix_DRAWCONFIG#ALPHA] = 1;
	uix_setgfxcolor();
);

function ui_colora(r, g, b, a) (
	uix_drawconfig_current[uix_DRAWCONFIG#RED] = r;
	uix_drawconfig_current[uix_DRAWCONFIG#GREEN] = g;
	uix_drawconfig_current[uix_DRAWCONFIG#BLUE] = b;
	uix_drawconfig_current[uix_DRAWCONFIG#ALPHA] = a;
	uix_setgfxcolor();
);

function ui_align(halign, valign) (
	halign >= 0 && halign <= 1 ? uix_drawconfig_current[uix_DRAWCONFIG#HALIGN] = halign;
	valign >= 0 && valign <= 1 ? uix_drawconfig_current[uix_DRAWCONFIG#VALIGN] = valign;
);

function ui_halign() (
	uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
);

function ui_valign() (
	uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
);

function ui_fontsize(size) (
	uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE] = size ? size : uix_default_fontsize;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_fontface(face) (
	uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE] = face;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_fontbold(isBold) (
	uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD] = isBold;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_fontitalic(isItalic) (
	uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC] = isItalic;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_font(face, size, isBold, isItalic) (
	face = face ? face : uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE];
	size = size ? size : uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE];

	uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE] = face;
	uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE] = size;
	uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD] = isBold;
	uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC] = isItalic;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_fill() (
	uix_setgfxcolor();
	gfx_rect(ui_left(), ui_top(), ui_width(), ui_height());
);

function ui_texth() (
	uix_setgfxfont();
	gfx_texth;
);

function ui_text_width(text) local(text_h, text_w) (
	text >= 0 ? (
		uix_setgfxfont();
		gfx_measurestr(text, text_w, text_h);
		text_w;
	) : ui_texth();
);

function ui_text_height(text) local(text_h, text_w) (
	text >= 0 ? (
		uix_setgfxfont();
		gfx_measurestr(text, text_w, text_h);
		text_h;
	) : ui_texth();
);

function ui_text(text) local (text_h, text_w, boxwidth, boxheight, valign, halign, fontscale, fontsize) (
	uix_setgfxcolor();
	uix_setgfxfont();
	valign = uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
	halign = uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
	
	gfx_measurestr(text, text_w, text_h);
	
	boxwidth = ui_width();
	boxheight = ui_height();
	
	fontscale = 1;
	text_w > boxwidth ? (
		fontscale = boxwidth/text_w;
	);
	text_h > boxheight ? (
		fontscale = min(boxheight/text_h, fontscale);
	);
	fontscale != 1 ? (
		fontsize = max(8, floor(fontscale*uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE]));
		fontscale = fontsize/uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE];
		gfx_setfont(
			16,
			uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE],
			fontsize,
			uix_fontflags()
		);
	);
	
	valign = uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
	halign = uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
	gfx_x = ui_left() + (boxwidth - text_w*fontscale)*halign;
	gfx_y = ui_top() + (boxheight - text_h*fontscale)*valign;
	
	gfx_drawstr(text);
	text_w;
);

function ui_textnumber(number, format) local(text) (
	sprintf(#uix_textnumber, format ? format : "%f", number);
	ui_text(#uix_textnumber);
);

function uix_fitline(text, start, text_end, width) local(i, result, line, line_end, char, hadspace, overflowed, text_w, text_h) (
	line = #;
	strcpy(line, "");
	line_end = 0;
	hadspace = 0;
	overflowed = 0;
	i = result = start;
	i < text_end ? while (
		char = str_getchar(text, i);
		char == 10 ? (
			result = i;
			overflowed = 1;
		) : (
			!hadspace ? result = i;
			char == 32 || char == 9 ? (
				hadspace = 1;
				gfx_measurestr(line, text_w, text_h);
				overflowed = text_w > width;
				!overflowed ? result = i;
			);
			str_setchar(line, line_end, char);
			line_end += 1;
		);
		i += 1;
		!overflowed && i < text_end;
	);
	overflowed ? result : text_end;
);

function ui_wraptext_height(text) local(text_length, line_start, line_end, width, height) (
	uix_setgfxfont();
	width = ui_width();
	height = 0;
	
	text_length = strlen(text);
	line_start = 0;
	line_start < text_length ? while (
		line_end = uix_fitline(text, line_start, text_length, width);
		height += gfx_texth;
		line_start = line_end + 1;
		line_start < text_length;
	);
	height;
);

function ui_wraptext(text) local(text_length, line_start, line_end, width, height, line, halign, valign, text_h, text_w) (
	uix_setgfxcolor();
	uix_setgfxfont();
	width = ui_width();
	height = 0;

	halign = uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
	valign = uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
	
	gfx_y = valign ? (
		ui_top() + (ui_height() - ui_wraptext_height(text))*valign;
	) : ui_top();
	
	text_length = strlen(text);
	line_start = 0;
	line_start < text_length ? while (
		line_end = uix_fitline(text, line_start, text_length, width);
		line = #;
		strcpy_substr(line, text, line_start, line_end - line_start);
		gfx_measurestr(line, text_w, text_h);
		gfx_x = ui_left() + (ui_width() - text_w)*halign;
		gfx_drawstr(line);
		gfx_y += gfx_texth;
		height += gfx_texth;
		line_start = line_end + 1;
		line_start < text_length;
	);
	height;
);

function ui_border_top() (
	uix_setgfxcolor();
	gfx_line(ui_left(), ui_top(), ui_right() - 1, ui_top());
);

function ui_border_bottom() (
	uix_setgfxcolor();
	gfx_line(ui_left(), ui_bottom() - 1, ui_right() - 1, ui_bottom() - 1);
);

function ui_border_left() (
	uix_setgfxcolor();
	gfx_line(ui_left(), ui_top(), ui_left(), ui_bottom() - 1);
);

function ui_border_right() (
	uix_setgfxcolor();
	gfx_line(ui_right() - 1, ui_top(), ui_right() - 1, ui_bottom() - 1);
);

function ui_border() (
	uix_setgfxcolor();
	gfx_x = ui_left();
	gfx_y = ui_top();
	gfx_lineto(gfx_x + ui_width() - 1, gfx_y);
	gfx_lineto(gfx_x, gfx_y + ui_height() - 1);
	gfx_lineto(ui_left(), gfx_y);
	gfx_lineto(gfx_x, ui_top());
);

///// Viewport stack operations /////

function ui_push() local(i, oldlayer) (
	uix_drawconfig_currentindex += 1;
	uix_drawconfig_currentindex < uix_drawconfig_count ? (
		i = 0;
		oldlayer = uix_drawconfig_current;
		uix_drawconfig_current = uix_drawconfig + uix_drawconfig_currentindex*uix_drawconfig_step;
		while (
			uix_drawconfig_current[i] = oldlayer[i];
			i += 1;
			i < uix_drawconfig_step;
		);
		// Some things shouldn't just be copied
		uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_DIRECTION] = -1;
		1;
	);
	0;
);
function ui_pop() local(prev) (
	uix_debug ? (
		ui_color(
			128 + 255*cos((uix_drawconfig_currentindex + 0 + time())*$pi/3),
			128 + 255*cos((uix_drawconfig_currentindex + 2 + time())*$pi/3),
			128 + 255*cos((uix_drawconfig_currentindex + 4 + time())*$pi/3)
		);
		ui_border();
	);

	prev = uix_drawconfig_current;
	uix_drawconfig_currentindex > 0 ? (
		uix_drawconfig_currentindex -= 1;
		uix_drawconfig_current = uix_drawconfig + uix_drawconfig_currentindex*uix_drawconfig_step;
		
		prev[uix_DRAWCONFIG#FONTINDEX] != uix_drawconfig_current[uix_DRAWCONFIG#FONTINDEX] ? uix_font_dirty = 1;
		prev[uix_DRAWCONFIG#FONTFACE] != uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE] ? uix_font_dirty = 1;
		prev[uix_DRAWCONFIG#FONTSIZE] != uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE] ? uix_font_dirty = 1;
		prev[uix_DRAWCONFIG#FONTBOLD] != uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD] ? uix_font_dirty = 1;
		prev[uix_DRAWCONFIG#FONTITALIC] != uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC] ? uix_font_dirty = 1;
		uix_font_dirty ? uix_setgfxfont();
		1;
	);
	0;
);
function ui_split_top(height) local(oldTop) (
	height = min(height, ui_height());
	oldTop = ui_top();
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] += height;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] -= height;
	ui_push();
	uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_DIRECTION] = UI_SPLIT_DIRECTION#TOP;
	uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_HEIGHT] = height;
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] = oldTop;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = height;
	height;
);
function ui_split_topratio(ratio) (
	ui_split_top(ratio*ui_height());
);
function ui_split_toptext(text) local(text_height) (
	text_height = max(ui_texth(), ui_text_height(text));
	ui_split_top(text_height + 2*uix_drawconfig_current[uix_DRAWCONFIG#VPADDING]);
);
function ui_split_bottom(height) local(oldBottom) (
	height = min(height, ui_height());
	oldBottom = ui_bottom();
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] -= height;
	ui_push();
	uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_DIRECTION] = UI_SPLIT_DIRECTION#BOTTOM;
	uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_HEIGHT] = height;
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] = oldBottom - height;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = height;
	height;
);
function ui_split_bottomratio(ratio) (
	ui_split_bottom(ratio*ui_height());
);
function ui_split_bottomtext(text) (
	text_height = max(ui_texth(), ui_text_height(text));
	ui_split_bottom(text_height + 2*uix_drawconfig_current[uix_DRAWCONFIG#VPADDING]);
);
function ui_split_left(width) local(oldLeft) (
	width = min(width, ui_width());
	oldLeft = ui_left();
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] += width;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] -= width;
	ui_push();
	uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_DIRECTION] = UI_SPLIT_DIRECTION#LEFT;
	uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_WIDTH] = width;
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] = oldLeft;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = width;
	width;
);
function ui_split_leftratio(ratio) (
	ui_split_left(ratio*ui_width());
);
function ui_split_lefttext(text) (
	ui_split_left(ui_text_width(text) + 2*uix_drawconfig_current[uix_DRAWCONFIG#HPADDING]);
);
function ui_split_right(width) local(oldRight) (
	width = min(width, ui_width());
	oldRight = ui_right();
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] -= width;
	ui_push();
	uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_DIRECTION] = UI_SPLIT_DIRECTION#RIGHT;
	uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_WIDTH] = width;
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] = oldRight - width;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = width;
	width;
);
function ui_split_rightratio(ratio) (
	ui_split_right(ratio*ui_width());
);
function ui_split_righttext(text) (
	ui_split_right(ui_text_width(text) + 2*uix_drawconfig_current[uix_DRAWCONFIG#HPADDING]);
);

function ui_split_next() local(direction, width, height) (
	direction = uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_DIRECTION];
	width = uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_WIDTH];
	height = uix_drawconfig_current[uix_DRAWCONFIG#SPLIT_HEIGHT];
	ui_pop();
	direction == UI_SPLIT_DIRECTION#LEFT ? (
		ui_split_left(width);
	) : direction == UI_SPLIT_DIRECTION#TOP ? (
		ui_split_top(height);
	) : direction == UI_SPLIT_DIRECTION#RIGHT ? (
		ui_split_right(width);
	) : direction == UI_SPLIT_DIRECTION#BOTTOM ? (
		ui_split_bottom(height);
	) : (
		ui_error("Called ui_split_next() without ui_split_*()");
		ui_push();
	)
);

function ui_push_height(height) (
	ui_push();
	height = min(height, ui_height());
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] += (uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] - height)*uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = height;
	height;
);
function ui_push_heightratio(ratio) (
	ui_push_height(ratio*ui_height());
);
function ui_push_heighttext(text) local(text_height) (
	text_height = max(ui_texth(), ui_text_height(text));
	ui_push_height(text_height + 2*uix_drawconfig_current[uix_DRAWCONFIG#VPADDING]);
);
function ui_push_width(width) (
	ui_push();
	width = min(width, ui_width());
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] += (uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] - width)*uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = width;
);
function ui_push_widthratio(ratio) (
	ui_push_width(ratio*ui_width());
);
function ui_push_widthtext(text) local(text_width) (
	text_width = ui_text_width(text);
	ui_push_width(text_width + 2*uix_drawconfig_current[uix_DRAWCONFIG#HPADDING]);
);

function ui_push_above(height) local(newheight) (
	ui_push();
	newheight = (ui_height() - height)*uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = newheight;
	newheight;
);
function ui_push_aboveratio(ratio) (
	ui_push_above(ratio*ui_height());
);
function ui_push_abovetext(text) local(text_height)  (
	text_height = max(ui_texth(), ui_text_height(text));
	ui_push_above(text_height + 2*uix_drawconfig_current[uix_DRAWCONFIG#VPADDING]);
);
function ui_push_below(height) local(newheight) (
	ui_push();
	newheight = (ui_height() - height)*(1 - uix_drawconfig_current[uix_DRAWCONFIG#VALIGN]);
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] = ui_bottom() - newheight;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = newheight;
	newheight;
);
function ui_push_belowratio(ratio) (
	ui_push_below(ratio*ui_height());
);
function ui_push_belowtext(text) local(text_height)  (
	text_height = max(ui_texth(), ui_text_height(text));
	ui_push_below(text_height + 2*uix_drawconfig_current[uix_DRAWCONFIG#VPADDING]);
);
function ui_push_leftof(width) local(newwidth) (
	ui_push();
	newwidth = (ui_width() - width)*uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = newwidth;
	newwidth;
);
function ui_push_leftofratio(ratio) (
	ui_push_leftof(ratio*ui_width());
);
function ui_push_leftoftext(text) local(text_width)  (
	text_width = ui_text_width(text);
	ui_push_leftof(text_width + 2*uix_drawconfig_current[uix_DRAWCONFIG#HPADDING]);
);
function ui_push_rightof(width) local(newwidth) (
	ui_push();
	newwidth = (ui_width() - width)*(1 - uix_drawconfig_current[uix_DRAWCONFIG#HALIGN]);
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] = ui_left() - newwidth;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = newwidth;
	newwidth;
);
function ui_push_rightofratio(ratio) (
	ui_push_rightof(ratio*ui_width());
);
function ui_push_rightoftext(text) local(text_width)  (
	text_width = ui_text_width(text);
	ui_push_rightof(text_width + 2*uix_drawconfig_current[uix_DRAWCONFIG#HPADDING]);
);

function ui_pad4(l, t, r, b) (
	l < 0 ? l = uix_drawconfig_current[uix_DRAWCONFIG#HPADDING];
	r < 0 ? r = uix_drawconfig_current[uix_DRAWCONFIG#HPADDING];
	t < 0 ? t = uix_drawconfig_current[uix_DRAWCONFIG#VPADDING];
	b < 0 ? b = uix_drawconfig_current[uix_DRAWCONFIG#VPADDING];
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] += l;
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] += t;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] -= l + r;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] -= t + b;
);

function ui_pad2(w, h) (
	ui_pad4(w, h, w, h);
);

function ui_pad1(n) (
	ui_pad4(n, n, n, n);
);

function ui_padtop() (
	ui_pad4(0, -1, 0, 0);
);

function ui_padbottom() (
	ui_pad4(0, 0, 0, -1);
);

function ui_padleft() (
	ui_pad4(-1, 0, 0, 0);
);

function ui_padright() (
	ui_pad4(0, 0, -1, 0);
);

function ui_pad() (
	ui_pad4(-1, -1, -1, -1);
);

function ui_padding(hpadding, vpadding) (
	hpadding >= 0 ? uix_drawconfig_current[uix_DRAWCONFIG#HPADDING] = hpadding;
	vpadding >= 0 ? uix_drawconfig_current[uix_DRAWCONFIG#VPADDING] = vpadding;
);

function ui_hpadding() (
	uix_drawconfig_current[uix_DRAWCONFIG#HPADDING];
);

function ui_vpadding() (
	uix_drawconfig_current[uix_DRAWCONFIG#VPADDING];
);

//////// Mouse functions ////////

function uix_click1wasinside() (
	!uix_mouseblocked && uix_click1_x >= ui_left() && uix_click1_x < ui_right() && uix_click1_y >= ui_top() && uix_click1_y < ui_bottom();
);

function ui_mouse_x() (
	mouse_x - ui_left();
);

function ui_mouse_xratio() (
	ui_mouse_x()/ui_width();
);

function ui_mouse_y() (
	mouse_y - ui_top();
);

function ui_mouse_yratio() (
	ui_mouse_y()/ui_height();
);

function ui_hover() (
	mouse_x >= ui_left() && mouse_x < ui_right() && mouse_y >= ui_top() && mouse_y < ui_bottom();
);

function ui_mouse_down() (
	uix_click1 && ui_hover();
);

function ui_mouse_up() (
	uix_unclick1 && ui_hover();
);

function ui_click_clear() (
	uix_click_block();
);

function ui_drag() (
	mouse_cap&1 && uix_click1wasinside() ? (
		time_precise() - uix_click1_t;
	) : 0;
);

function ui_press() (
	ui_hover() ? ui_drag() : 0;
);

function ui_clickcount() (
	uix_click1count;
);

function ui_click() (
	ui_mouse_up() && uix_click1wasinside() && ui_hover() ? (
		time_precise() - uix_click1_t;
	) : 0;
);

/////////////// LEVEL 2 ///////////////

uix_control_labelratio = 0.2;

function control_finish_enabled(strength) local(height, topalpha, bottomalpha) (
	// White fade
	height = ui_height()*0.5;
	topalpha = strength*0.3;
	bottomalpha = 0;
	gfx_gradrect(
		ui_left(), ui_top(), ui_width(), height,
		1, 1, 1, topalpha,
		0, 0, 0, 0,
		0, 0, 0, (bottomalpha - topalpha)/height
	);
	// Black fade
	height = ui_height()*0.5;
	topalpha = 0;
	bottomalpha = strength*0.1;
	gfx_gradrect(
		ui_left(), ui_bottom() - height, ui_width(), height,
		0, 0, 0, topalpha,
		0, 0, 0, 0,
		0, 0, 0, (bottomalpha - topalpha)/height
	);
	// Black fade 2
	height = ui_height()*0.2;
	topalpha = 0;
	bottomalpha = strength*0.1;
	gfx_gradrect(
		ui_left(), ui_bottom() - height, ui_width(), height,
		0, 0, 0, topalpha,
		0, 0, 0, 0,
		0, 0, 0, (bottomalpha - topalpha)/height
	);

	ui_colora(0, 0, 0, 0.1);
	ui_border();
);

function control_finish_disabled(strength) (
	ui_colora(0, 0, 0, 0.1);
	ui_border();
);

function control_finish_inset(strength) local(height, topalpha, bottomalpha) (
	// Black fade
	height = min(5, ui_height()/2);
	topalpha = strength*0.1;
	bottomalpha = 0;
	gfx_gradrect(
		ui_left(), ui_top(), ui_width(), height,
		0, 0, 0, topalpha,
		0, 0, 0, 0,
		0, 0, 0, (bottomalpha - topalpha)/height
	);
	// White fade
	height = min(5, ui_height()/2);
	topalpha = 0;
	bottomalpha = strength*0.3;
	gfx_gradrect(
		ui_left(), ui_bottom() - height, ui_width(), height,
		1, 1, 1, topalpha,
		0, 0, 0, 0,
		0, 0, 0, (bottomalpha - topalpha)/height
	);
	ui_colora(0, 0, 0, 0.1);
	ui_border();
);

function control_color_fill_disabled() (
	ui_color(180, 180, 180);
);

function control_color_fill_enabled() local(shade, red, green, blue) (
	shade = ui_press() ? 0.5 : ui_hover() ? 0.75 : ui_drag() ? 0.75 : 1;
	ui_color(64*shade, 102*shade, 140*shade);
);

function control_color_fill_inset() (
	ui_color(255, 255, 255);
);

function control_color_text_enabled() (
	ui_color(255, 255, 255);
);

function control_color_text_disabled() (
	ui_color(255, 255, 255);
);

function control_color_text_inset() (
	ui_color(0, 0, 0);
);

function control_border() (
	ui_push();
		ui_colora(0, 0, 0, 0.3);
		ui_border();
	ui_pop();
);

function control_indicator_button(text, status) local(click) (
	ui_push();
		status ? control_color_fill_enabled() : control_color_fill_disabled();
		ui_fill();

		status ? control_color_text_enabled() : control_color_text_disabled();
		ui_text(text);
		status ? control_finish_enabled(1) : control_finish_disabled(1);
		
		click = ui_click();
	ui_pop();
	click;
);

function control_button(text) (
	control_indicator_button(text, 1);
);

function control_arrow(direction) local(size, tmp, centerx, centery, point1x, point1y, point2x, point2y, point3x, point3y) ( // left, up, right, down
	size = min(ui_height(), ui_width());
	direction == 0 ? (
		centerx = size/2;
		centery = ui_height()/2;
	) : direction == 1 ? (
		centerx = ui_width()/2;
		centery = size/2;
	) : direction == 2 ? (
		centerx = ui_width() - size/2;
		centery = ui_height()/2;
	) : (
		centerx = ui_width()/2;
		centery = ui_height() - size/2;
	);
	centerx += ui_left();
	centery += ui_top();

	size = min(size, ui_texth());
	size *= 0.5;
	angle = direction*$pi/2;
	
	// Draw facing upwards to start
	point1x = 0;
	point1y = 0.5*size*(direction >= 2 ? 1 : -1);
	point2x = -0.5*size;
	point2y = -point1y;
	point3x = 0.5*size;
	point3y = -point1y;
	direction == 0 || direction == 2 ? (
		// Swap X and Y
		tmp = point1x;
		point1x = point1y;
		point1y = tmp;
		tmp = point2x;
		point2x = point2y;
		point2y = tmp;
		tmp = point3x;
		point3x = point3y;
		point3y = tmp;
	);

	ui_color_refresh();
	gfx_triangle(centerx + point1x, centery + point1y, centerx + point2x, centery + point2y, centerx + point3x, centery + point3y);
);

function control_selector(value, text, next_value, prev_value) local(buttonwidth) (
	ui_push();
		ui_color(255, 255, 255);
		ui_fill();
		buttonwidth = min(ui_height()/2, ui_width()/2);
		
		ui_halign() <= 0.5 ? ui_split_left(buttonwidth) : ui_split_right(buttonwidth);
			ui_colora(255, 255, 255, 0.8);
			ui_split_topratio(0.5);
				control_color_fill_enabled();
				ui_fill();
				control_color_text_enabled();
				control_arrow(1);
				control_finish_enabled(1);
				ui_click() ? value = next_value;
			ui_split_next();
				control_color_fill_enabled();
				ui_fill();
				control_color_text_enabled();
				control_arrow(3);
				control_finish_enabled(1);
				ui_click() ? value = prev_value;
			ui_pop();
		ui_pop();
		
		control_color_text_inset();
		ui_push();
			ui_padleft();
			ui_padright();
			ui_text(text);
		ui_pop();

		control_finish_inset(1);
	ui_pop();
	control_border();
	value;
);

function control_navbar(title, next_title, next_screen) local(click) (
	ui_split_toptext(title);
		ui_color(255, 255, 255);
		ui_fill();

		ui_color(0, 0, 0);
		title ? (
			ui_text(title);
		);
		control_finish_enabled(0.5);
		control_border();

		ui_screen_level() > 0 ? (
			ui_split_lefttext("< back");
				control_button("< back") ? (
					ui_screen_close();
				);
			ui_pop();
		);
		(next_screen || next_title) ? (
			next_title = next_title ? next_title : "next >";
			ui_split_righttext(next_title);
				control_button(next_title) ? (
					ui_screen_open(next_screen);
				);
			ui_pop();
		);
	ui_pop();
	ui_click();
);

function control_hslider(value, range_low, range_high, curve_bias) local(valueratio, screenratio) (
	valueratio = max(0, min(1, (value - range_low)/(range_high - range_low)));
	screenratio = curve_bias ? (
		log(valueratio*(exp(curve_bias) - 1) + 1)/curve_bias
	) : valueratio;
	ui_drag() ? (
		screenratio = max(0, min(1, ui_mouse_xratio()));
		valueratio = curve_bias ? (
			(exp(screenratio*curve_bias) - 1)/(exp(curve_bias) - 1)
		) : screenratio;
		value = range_low + (range_high - range_low)*valueratio;
	);

	ui_push();
		control_color_fill_inset();
		ui_fill();
		control_finish_inset(1);

		ui_push();
			control_color_fill_enabled();
			barwidth = floor((ui_width() - 1)*screenratio + 1.5);
			ui_split_left(barwidth);
				ui_fill();
				control_finish_enabled(1);
			ui_pop();
		ui_pop();

		control_border();
	ui_pop();
	value;
);

/*
function control_text_left(text) (
	ui_split_lefttext(text);
		ui_text(text);
	ui_pop();
);
function control_label_left(text) local(width) (
	ui_split_leftratio(uix_control_labelratio);
		ui_padright();
		ui_align(1, -1);
		ui_text(text);
	ui_pop();
);
function control_label_leftnumber(value, format) (
	sprintf(#control_label, format, value);
	control_label_left(#control_label);
);

function control_text_right(text) (
	ui_split_righttext(text);
		ui_text(text);
	ui_pop();
);
function control_label_right(text) local(width) (
	ui_split_rightratio(uix_control_labelratio);
		ui_padleft();
		ui_align(0, -1);
		ui_text(text);
	ui_pop();
);
function control_label_rightnumber(value, format) (
	sprintf(#control_label, format, value);
	control_label_right(#control_label);
);

function control_text_top(text) (
	ui_split_toptext(text);
		ui_text(text);
	ui_pop();
);
function control_label_top(text) (
	ui_split_toptext(-1);
		ui_padbottom();
		ui_align(-1, 1);
		ui_text(text);
	ui_pop();
);
function control_label_topnumber(value, format) (
	sprintf(#control_label, format, value);
	control_label_top(#control_label);
);

function control_text_bottom(text) (
	ui_split_bottomtext(text);
		ui_text(text);
	ui_pop();
);
function control_label_bottom(text) (
	ui_split_bottomtext(-1);
		ui_padtop();
		ui_align(-1, 0);
		ui_text(text);
	ui_pop();
);
function control_label_bottomnumber(value, format) (
	sprintf(#control_label, format, value);
	control_label_bottom(#control_label);
);
*/

function control_system() (
	ui_system();
);
