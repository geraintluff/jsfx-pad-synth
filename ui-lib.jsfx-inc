@init
uix_hassetup = 0;
uix_screenstack = 0;
uix_screenstack_step = 0;
uix_screenstack_layercount = 10;
uix_screenstack_currentlayer = 0;

uix_drawconfig = 0;
uix_drawconfig_step = uix_DRAWCONFIG##;
uix_drawconfig_count = 100;
uix_drawconfig_current = 0;
uix_drawconfig_currentindex = -1;

uix_mousecap_prev = 0;
uix_click1 = uix_click2 = uix_click64 = 0;
uix_unclick1 = uix_unclick2 = uix_unclick64 = 0;
uix_click1_x = uix_click1_y = uix_click1_t = 0; // Left
uix_click2_x = uix_click2_y = uix_click2_t = 0; // Right
uix_click64_x = uix_click64_y = uix_click3_t = 0; // Middle

uix_default_fontsize = 16;
uix_default_fontface = "Arial";
uix_font_dirty = 0;

uix_error = 0;
function uix_clamp1(v) (
	min(1, max(0, v));
);
function uix_clamp255(v) (
	min(255, max(0, floor(v + 0.5)));
);
function uix_setgfxcolorrgba(r, g, b, a) (
	gfx_r = uix_clamp1(r/255);
	gfx_g = uix_clamp1(g/255);
	gfx_b = uix_clamp1(b/255);
	gfx_a = uix_clamp1(a);
);
function uix_setgfxcolor() (
	uix_setgfxcolorrgba(
		uix_drawconfig_current[uix_DRAWCONFIG#RED],
		uix_drawconfig_current[uix_DRAWCONFIG#GREEN],
		uix_drawconfig_current[uix_DRAWCONFIG#BLUE],
		uix_drawconfig_current[uix_DRAWCONFIG#ALPHA]
	);
);
function uix_clearcolor(r, g, b) (
	uix_clamp255(r) + 256*uix_clamp255(g) + 65536*uix_clamp255(b);
);
function uix_fontflags() local(bold, italic) (
	bold = uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD];
	italic = uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC];
	bold ? (
		italic ? 'bi' : 'b';
	) : (
		italic ? 'i' : '';
	);
);
function uix_setgfxfont() (
	uix_font_dirty || gfx_getfont() != uix_drawconfig_current[uix_DRAWCONFIG#FONTINDEX] ? (
		uix_font_dirty = 0;
		gfx_setfont(
			uix_drawconfig_current[uix_DRAWCONFIG#FONTINDEX],
			uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE],
			uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE],
			uix_fontflags()
		);
	);
);

function ui_error(string) (
	uix_screenstack_currentlayer = 0;
	uix_screenstack[0] = "error";
	uix_error = uix_screenstack[1] = string;
	0;
);

function ui_screen() (
	uix_hassetup
		? (uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer)[0]
		: "error";
);

function ui_screen_level() (
	uix_screenstack_currentlayer;
);

function ui_screen_open(id) local(i, screen) (
	uix_screenstack_currentlayer += 1;
	uix_screenstack_currentlayer < uix_screenstack_layercount ? (
		screen = (uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer);
		screen[0] = id;
		i = 1;
		while (
			screen[i] = 0;
			i += 1;
			i < uix_screenstack_step;
		);
	) : ui_error("Too many screens - only 10 dialogs deep")
);

function ui_screen_close() (
	uix_screenstack_currentlayer > 0 ? (
		uix_screenstack_currentlayer -= 1;
	) : ui_error("Cannot close top-level screen");
);

function ui_screen_get(index) local(screen) (
	screen = (uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer);
	offset = index + 1;
	offset < uix_screenstack_step ? (
		screen[offset];
	) : (
		ui_error("Screens only have 10 arguments");
	);
);

function ui_screen_set(index, value) local(screen, offset) (
	screen = (uix_screenstack + uix_screenstack_step*uix_screenstack_currentlayer);
	offset = index + 1;
	offset < uix_screenstack_step ? (
		screen[offset] = value;
	) : (
		ui_error("Screens only have 10 arguments");
	);
);

function ui_setup(stackstart) local(uix_screenstack_end, uix_drawconfig_end) (
	uix_hassetup = 1;
	
	uix_screenstack = stackstart;
	uix_screenstack_step = varcount + 1;
	uix_screenstack_layercount = layercount ? layercount : 10;
	uix_screenstack_end = stackstart + uix_screenstack_step*uix_screenstack_layercount;
	
	uix_drawconfig = uix_screenstack_end;
	uix_drawconfig_end = uix_drawconfig + uix_drawconfig_step*uix_drawconfig_count;
	uix_drawconfig_end;
);

function ui_start(defaultScreen) local(i, click) (
	uix_hassetup ? (
		!ui_screen() ? (
			uix_screenstack_currentlayer = 0;
			i = 0;
			while (
				uix_screenstack[i] = 0;
				i += 1;
				i < uix_screenstack_step;
			);
			uix_screenstack[0] = defaultScreen;
		);
		uix_drawconfig_currentindex = 0;
		uix_drawconfig_current = uix_drawconfig;
		
		// Default colours
		gfx_clear = uix_clearcolor(242, 242, 242);
		
		uix_drawconfig_current[uix_DRAWCONFIG#RED] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#GREEN] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#BLUE] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#ALPHA] = 1;

		uix_drawconfig_current[uix_DRAWCONFIG#LEFT] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#TOP] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = gfx_w;
		uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = gfx_h;
		uix_drawconfig_current[uix_DRAWCONFIG#HALIGN] = 0.5;
		uix_drawconfig_current[uix_DRAWCONFIG#VALIGN] = 0.5;
		uix_drawconfig_current[uix_DRAWCONFIG#HPADDING] = 10;
		uix_drawconfig_current[uix_DRAWCONFIG#VPADDING] = 8;


		uix_drawconfig_current[uix_DRAWCONFIG#FONTINDEX] = 16;
		uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE] = uix_default_fontface;
		uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE] = uix_default_fontsize;
		uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD] = 0;
		uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC] = 0;
		
		uix_setgfxfont();

		uix_unclick1 = (!mouse_cap&1 && uix_mousecap_prev&1);
		uix_click1 = (mouse_cap&1 && !uix_mousecap_prev&1) ? (
			uix_click1 = 1;
			uix_click1_x = mouse_x;
			uix_click1_y = mouse_y;
			uix_click1_t = time_precise() - 0.001;
		);
		uix_unclick2 = (!mouse_cap&2 && uix_mousecap_prev&2);
		uix_click2 = (mouse_cap&2 && !uix_mousecap_prev&2) ? (
			uix_click2 = 1;
			uix_click2_x = mouse_x;
			uix_click2_y = mouse_y;
			uix_click2_t = time_precise() - 0.001;
		);
		uix_unclick64 = (!mouse_cap&64 && uix_mousecap_prev&64);
		uix_click64 = (mouse_cap&64 && !uix_mousecap_prev&64) ? (
			uix_click64 = 1;
			uix_click64_x = mouse_x;
			uix_click64_y = mouse_y;
			uix_click64_t = time_precise() - 0.001;
		);
		uix_mousecap_prev = mouse_cap;
	) : (
		uix_error = "ui_setup() has not been called";
	);
);

function ui_system() local(text, error) (
	ui_screen() == "error" ? (
		gfx_clear = 255 + 255*256 + 255*65536;
		gfx_r = 64;
		gfx_g = gfx_b = 0;
		gfx_x = gfx_y = gfx_texth;
		error = uix_error ? uix_error : uix_screenstack[1];
		strlen(error) ? (
			gfx_printf("Error: %s\n(%f)", error, error);
		) : (
			gfx_printf("Error: #%s", error);
		);
	) : (
		gfx_clear = 255 + 255*256 + 255*65536;
		gfx_r = gfx_g = gfx_b = 0;
		gfx_x = gfx_y = gfx_texth;
		ui_screen() ? (
			gfx_printf("Unknown screen: %s (%f)", ui_screen(), ui_screen());
			uix_click1 ? (
				uix_screenstack_currentlayer = -1;
				ui_screen_open(0);
			);
		) : (
			gfx_drawstr("Current screen is 0 - are you calling ui_start() first?");
		);
	);
);

function ui_left() (
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT];
);
function ui_top() (
	uix_drawconfig_current[uix_DRAWCONFIG#TOP];
);
function ui_width() (
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH];
);
function ui_height() (
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT];
);
function ui_bottom() (
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] + uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT];
);
function ui_right() (
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] + uix_drawconfig_current[uix_DRAWCONFIG#WIDTH];
);

/////// Drawing operations ///////

function ui_color(r, g, b) (
	uix_drawconfig_current[uix_DRAWCONFIG#RED] = r;
	uix_drawconfig_current[uix_DRAWCONFIG#GREEN] = g;
	uix_drawconfig_current[uix_DRAWCONFIG#BLUE] = b;
	uix_drawconfig_current[uix_DRAWCONFIG#ALPHA] = 1;
	uix_setgfxcolor();
);

function ui_align(halign, valign) (
	uix_drawconfig_current[uix_DRAWCONFIG#HALIGN] = halign;
	uix_drawconfig_current[uix_DRAWCONFIG#VALIGN] = valign;
);

function ui_fontsize(size) (
	size = size ? size : uix_default_fontsize;
	uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE] = size;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_fontface(face) (
	uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE] = face;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_fontbold(isBold) (
	uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD] = isBold;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_fontitalic(isItalic) (
	uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC] = isItalic;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_font(face, size, isBold, isItalic) (
	face = face ? face : uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE];
	size = size ? size : uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE];

	uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE] = face;
	uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE] = size;
	uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD] = isBold;
	uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC] = isItalic;
	uix_font_dirty = 1;
	uix_setgfxfont();
);

function ui_fill(r, g, b) (
	uix_setgfxcolorrgba(r, g, b, 1);
	gfx_rect(ui_left(), ui_top(), ui_width(), ui_height());
);

function ui_above(height) (
	(ui_height() - height)*uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
);

function ui_below(height) (
	(ui_height() - height)*(1 - uix_drawconfig_current[uix_DRAWCONFIG#VALIGN]);
);

function ui_texth() (
	uix_setgfxfont();
	gfx_texth;
);

function ui_text_width(text) local(text_h, text_w) (
	uix_setgfxfont();
	gfx_measurestr(text, text_w, text_h);
	text_w;
);

function ui_text_height(text) local(text_h, text_w) (
	uix_setgfxfont();
	gfx_measurestr(text, text_w, text_h);
	text_w;
);

function ui_text(text) local (text_h, text_w, boxwidth, boxheight, valign, halign, fontscale, fontsize) (
	uix_setgfxcolor();
	uix_setgfxfont();
	valign = uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
	halign = uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
	
	gfx_measurestr(text, text_w, text_h);
	
	boxwidth = ui_width();
	boxheight = ui_height();
	
	fontscale = 1;
	text_w > boxwidth ? (
		fontscale = boxwidth/text_w;
	);
	text_h > boxheight ? (
		fontscale = min(boxheight/text_h, fontscale);
	);
	fontscale != 1 ? (
		fontsize = max(8, floor(fontscale*uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE]));
		gfx_setfont(
			16,
			uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE],
			fontsize,
			uix_fontflags()
		);
	);
	
	valign = uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
	halign = uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
	gfx_x = ui_left() + (boxwidth - text_w*fontscale)*halign;
	gfx_y = ui_top() + (boxheight - text_h*fontscale)*valign;
	
	gfx_drawstr(text);
	text_w;
);

function ui_textnumber(number, format) local(text) (
	text = #uix_textnumber;
	sprintf(text, format ? format : "%f", number);
	debug_text = text;
	ui_text(text);
);

function uix_fitline(text, start, text_end, width) local(i, result, line, line_end, char, hadspace, overflowed, text_w, text_h) (
	line = #;
	strcpy(line, "");
	line_end = 0;
	hadspace = 0;
	overflowed = 0;
	i = result = start;
	i < text_end ? while (
		char = str_getchar(text, i);
		char == 10 ? (
			result = i;
			overflowed = 1;
		) : (
			!hadspace ? result = i;
			char == 32 || char == 9 ? (
				hadspace = 1;
				gfx_measurestr(line, text_w, text_h);
				overflowed = text_w > width;
				!overflowed ? result = i;
			);
			str_setchar(line, line_end, char);
			line_end += 1;
		);
		i += 1;
		!overflowed && i < text_end;
	);
	overflowed ? result : text_end;
);

function ui_wraptext_height(text) local(text_length, line_start, line_end, width, height) (
	uix_setgfxfont();
	width = ui_width();
	height = 0;
	
	text_length = strlen(text);
	line_start = 0;
	line_start < text_length ? while (
		line_end = uix_fitline(text, line_start, text_length, width);
		height += gfx_texth;
		line_start = line_end + 1;
		line_start < text_length;
	);
	height;
);

function ui_wraptext(text) local(text_length, line_start, line_end, width, height, line, halign, valign, text_h, text_w) (
	uix_setgfxcolor();
	uix_setgfxfont();
	width = ui_width();
	height = 0;

	halign = uix_drawconfig_current[uix_DRAWCONFIG#HALIGN];
	valign = uix_drawconfig_current[uix_DRAWCONFIG#VALIGN];
	
	gfx_y = valign ? (
		ui_top() + (ui_height() - ui_wraptext_height(text))*valign;
	) : ui_top();
	
	text_length = strlen(text);
	line_start = 0;
	line_start < text_length ? while (
		line_end = uix_fitline(text, line_start, text_length, width);
		line = #;
		strcpy_substr(line, text, line_start, line_end - line_start);
		gfx_measurestr(line, text_w, text_h);
		gfx_x = ui_left() + (ui_width() - text_w)*halign;
		gfx_drawstr(line);
		gfx_y += gfx_texth;
		height += gfx_texth;
		line_start = line_end + 1;
		line_start < text_length;
	);
	height;
);

function ui_border_top() (
	uix_setgfxcolor();
	gfx_line(ui_left(), ui_top(), ui_right() - 1, ui_top());
);

function ui_border_bottom() (
	uix_setgfxcolor();
	gfx_line(ui_left(), ui_bottom() - 1, ui_right() - 1, ui_bottom() - 1);
);

function ui_border_left() (
	uix_setgfxcolor();
	gfx_line(ui_left(), ui_top(), ui_left(), ui_bottom() - 1);
);

function ui_border_right() (
	uix_setgfxcolor();
	gfx_line(ui_right() - 1, ui_top(), ui_right() - 1, ui_bottom() - 1);
);

function ui_border() (
	uix_setgfxcolor();
	gfx_x = ui_left();
	gfx_y = ui_top();
	gfx_lineto(gfx_x + ui_width() - 1, gfx_y);
	gfx_lineto(gfx_x, gfx_y + ui_height() - 1);
	gfx_lineto(ui_left(), gfx_y);
	gfx_lineto(gfx_x, ui_top());
);

///// Viewport stack operations /////

function ui_push() local(i, oldlayer) (
	uix_drawconfig_currentindex += 1;
	uix_drawconfig_currentindex < uix_drawconfig_count ? (
		i = 0;
		oldlayer = uix_drawconfig_current;
		uix_drawconfig_current = uix_drawconfig + uix_drawconfig_currentindex*uix_drawconfig_step;
		while (
			uix_drawconfig_current[i] = oldlayer[i];
			i += 1;
			i < uix_drawconfig_step;
		);
		1;
	);
	0;
);
function ui_pop() local(prev) (
	prev = uix_drawconfig_current;
	uix_drawconfig_currentindex > 0 ? (
		uix_drawconfig_currentindex -= 1;
		uix_drawconfig_current = uix_drawconfig + uix_drawconfig_currentindex*uix_drawconfig_step;
		
		prev[uix_DRAWCONFIG#FONTINDEX] != uix_drawconfig_current[uix_DRAWCONFIG#FONTINDEX] ? uix_font_dirty = 1;
		prev[uix_DRAWCONFIG#FONTFACE] != uix_drawconfig_current[uix_DRAWCONFIG#FONTFACE] ? uix_font_dirty = 1;
		prev[uix_DRAWCONFIG#FONTSIZE] != uix_drawconfig_current[uix_DRAWCONFIG#FONTSIZE] ? uix_font_dirty = 1;
		prev[uix_DRAWCONFIG#FONTBOLD] != uix_drawconfig_current[uix_DRAWCONFIG#FONTBOLD] ? uix_font_dirty = 1;
		prev[uix_DRAWCONFIG#FONTITALIC] != uix_drawconfig_current[uix_DRAWCONFIG#FONTITALIC] ? uix_font_dirty = 1;
		uix_font_dirty ? uix_setgfxfont();
		
		1;
	);
	0;
);
function ui_split_top(height) local(oldTop) (
	oldTop = uix_drawconfig_current[uix_DRAWCONFIG#TOP];
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] += height;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] -= height;
	ui_push();
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] = oldTop;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = height;
);
function ui_split_topratio(ratio) (
	ui_split_top(ratio*ui_height());
);
function ui_split_toptext(text) local(text_height) (
	text_height = text ? ui_text_height(text) : ui_texth();
	ui_split_top(text_height + 2*uix_drawconfig_current[uix_DRAWCONFIG#VPADDING]);
);
function ui_split_bottom(height) local(bottom) (
	bottom = uix_drawconfig_current[uix_DRAWCONFIG#TOP] + uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT];
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] -= height;
	ui_push();
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] = bottom - height;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] = height;
);
function ui_split_bottomratio(ratio) (
	ui_split_bottom(ratio*ui_height());
);
function ui_split_bottomtext(text) (
	text_height = text ? ui_text_height(text) : ui_texth();
	ui_split_bottom(text_height + 2*uix_drawconfig_current[uix_DRAWCONFIG#VPADDING]);
);
function ui_split_left(width) local(oldLeft) (
	oldLeft = uix_drawconfig_current[uix_DRAWCONFIG#LEFT];
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] += width;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] -= width;
	ui_push();
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] = oldLeft;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = width;
);
function ui_split_leftratio(ratio) (
	ui_split_left(ratio*ui_width());
);
function ui_split_lefttext(text) (
	ui_split_left(ui_text_width(text) + 2*uix_drawconfig_current[uix_DRAWCONFIG#HPADDING]);
);
function ui_split_right(width) local(right) (
	right = uix_drawconfig_current[uix_DRAWCONFIG#LEFT] + uix_drawconfig_current[uix_DRAWCONFIG#WIDTH];
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] -= width;
	ui_push();
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] = right - width;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] = width;
);
function ui_split_rightratio(ratio) (
	ui_split_right(ratio*ui_width());
);
function ui_split_righttext(text) (
	ui_split_right(ui_text_width(text) + 2*uix_drawconfig_current[uix_DRAWCONFIG#HPADDING]);
);

function ui_pad4(l, t, r, b) (
	l < 0 ? l = uix_drawconfig_current[uix_DRAWCONFIG#HPADDING];
	r < 0 ? r = uix_drawconfig_current[uix_DRAWCONFIG#HPADDING];
	t < 0 ? t = uix_drawconfig_current[uix_DRAWCONFIG#VPADDING];
	b < 0 ? b = uix_drawconfig_current[uix_DRAWCONFIG#VPADDING];
	uix_drawconfig_current[uix_DRAWCONFIG#LEFT] += l;
	uix_drawconfig_current[uix_DRAWCONFIG#TOP] += t;
	uix_drawconfig_current[uix_DRAWCONFIG#WIDTH] -= l + r;
	uix_drawconfig_current[uix_DRAWCONFIG#HEIGHT] -= t + b;
);

function ui_pad2(w, h) (
	ui_pad4(w, h, w, h);
);

function ui_pad1(n) (
	ui_pad4(n, n, n, n);
);

function ui_padtop() (
	ui_pad4(0, -1, 0, 0);
);

function ui_padbottom() (
	ui_pad4(0, 0, 0, -1);
);

function ui_padleft() (
	ui_pad4(-1, 0, 0, 0);
);

function ui_padright() (
	ui_pad4(0, 0, -1, 0);
);

function ui_pad() (
	ui_pad4(-1, -1, -1, -1);
);

function ui_padding(hpadding, vpadding) (
	hpadding >= 0 ? uix_drawconfig_current[uix_DRAWCONFIG#HPADDING] = hpadding;
	vpadding >= 0 ? uix_drawconfig_current[uix_DRAWCONFIG#VPADDING] = vpadding;
);

//////// Mouse functions ////////

function uix_click1wasinside() (
	uix_click1_x >= ui_left() && uix_click1_x < ui_right() && uix_click1_y >= ui_top() && uix_click1_y < ui_bottom();
);

function ui_mouse_x() (
	mouse_x - ui_left();
);

function ui_mouse_xratio() (
	ui_mouse_x()/ui_width();
);

function ui_mouse_y() (
	mouse_y - ui_top();
);

function ui_mouse_yratio() (
	ui_mouse_y()/ui_height();
);

function ui_hover() (
	mouse_x >= ui_left() && mouse_x < ui_right() && mouse_y >= ui_top() && mouse_y < ui_bottom();
);

function ui_mouse_down() (
	uix_click1 && ui_hover();
);

function ui_mouse_up() (
	uix_unclick1 && ui_hover();
);

function ui_click_clear() (
	uix_click1 = uix_click2 = uix_click64 = 0;
	uix_unclick1 = uix_unclick2 = uix_unclick64 = 0;
);

function ui_drag() (
	mouse_cap&1 && uix_click1wasinside() ? (
		time_precise() - uix_click1_t;
	) : 0;
);

function ui_press() (
	ui_hover() ? ui_drag() : 0;
);

function ui_click() (
	ui_mouse_up() && uix_click1wasinside() && ui_hover() ? (
		time_precise() - uix_click1_t;
	) : 0;
);

/////////////// LEVEL 2 ///////////////

uix_control_red = 64;
uix_control_green = 102;
uix_control_blue = 140;
uix_control_disabled_red = uix_control_disabled_green = uix_control_disabled_blue = 180;
function uix_control_shade() (
	shade = ui_press() ? 0.5 : ui_hover() ? 0.75 : ui_drag() ? 0.75 : 1;
);

function control_gloss(strength) local(height, topalpha, bottomalpha) (
	// White fade
	height = ui_height()*0.5;
	topalpha = strength*0.3;
	bottomalpha = 0;
	gfx_gradrect(
		ui_left(), ui_top(), ui_width(), height,
		1, 1, 1, topalpha,
		0, 0, 0, 0,
		0, 0, 0, (bottomalpha - topalpha)/height
	);
	// Black fade
	height = ui_height()*0.5;
	topalpha = 0;
	bottomalpha = strength*0.1;
	gfx_gradrect(
		ui_left(), ui_bottom() - height, ui_width(), height,
		0, 0, 0, topalpha,
		0, 0, 0, 0,
		0, 0, 0, (bottomalpha - topalpha)/height
	);
	// Black fade 2
	height = ui_height()*0.2;
	topalpha = 0;
	bottomalpha = strength*0.1;
	gfx_gradrect(
		ui_left(), ui_bottom() - height, ui_width(), height,
		0, 0, 0, topalpha,
		0, 0, 0, 0,
		0, 0, 0, (bottomalpha - topalpha)/height
	);
);

function control_indicator_button(text, status) local(click, shade, red, green, blue) (
	ui_push();
		shade = status ? uix_control_shade() : 1;
		
		red = status ? uix_control_red : uix_control_disabled_red;
		green = status ? uix_control_green : uix_control_disabled_green;
		blue = status ? uix_control_blue : uix_control_disabled_blue;
		
		ui_fill(red*shade, green*shade, blue*shade);
		ui_color(255, 255, 255);
		ui_text(text);
		status ? control_gloss(1);
		click = ui_click();
	ui_pop();
	click;
);

function control_button(text) (
	control_indicator_button(text, 1);
);

function control_navbar(title, next_screen, next_title) local(click) (
	ui_split_toptext(0);
		ui_fill(255, 255, 255);
		control_gloss(0.5);
		ui_color(160, 160, 160);
		ui_border_bottom();
		ui_color(0, 0, 0);
		title ? (
			ui_text(title);
		);
		ui_screen_level() > 0 ? (
			ui_split_lefttext("< back");
				control_button("< back") ? (
					ui_screen_close();
				);
			ui_pop();
		);
		(next_screen || next_title) ? (
			next_title = next_title ? next_title : "next >";
			ui_split_righttext(next_title);
				control_button(next_title) ? (
					ui_screen_open(next_screen);
				);
			ui_pop();
		);
	ui_pop();
	ui_click();
);

function control_hslider(value, range_low, range_high, curve) local(ratio, shade) (
	curve > 0 ? ( // Power
		ratio = (value - range_low)/(range_high - range_low);
		ratio = pow(ratio, 1/curve);
	) : (
		range_low > 0 && range_high > 0 && value > 0 ? ( // Logarithmic
			ratio = log(value/range_low)/log(range_high/range_low);
		) : ui_error("Cannot have negative values or range for logarithmic slider");
	);
	ui_push();
		ui_fill(255, 255, 255);
		ui_color(0, 0, 0);
		ui_border();
		ui_pad1(2);
		
		shade = uix_control_shade();
		ui_color(uix_control_red*shade, uix_control_green*shade, uix_control_blue*shade);
		gfx_rect(ui_left(), ui_top(), ui_width()*ratio, ui_height());
		
		ui_drag() ? (
			ratio = max(0, min(1, ui_mouse_xratio()));
			curve > 0 ? (
				value = range_low + (range_high - range_low)*pow(ratio, curve);
			) : (
				range_low > 0 && range_high > 0 ? (
					value = exp(log(range_low) + log(range_high/range_low)*ratio);
				)
			);
		);
		control_gloss(1);
	ui_pop();
	value;
);
